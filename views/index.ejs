<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/style.css">
    <title>WhatsApp Transmission</title>
</head>
<body>
    <header id="connectionStatus">
        <h1>Carregando...</h1>
    </header>

    <main>
        <div class="qr-code" style="display: none;">
            <img src="" alt="QR Code">
            <p>Escaneie o QR Code para conectar</p>
        </div>
    
        <div class="content" style="display: none;">
            <div class="left">
                <form id="messageForm" onsubmit="sendMessage(event)">
                    <div class="areaMessage">
                        <textarea id="messageTemplate" name="messageTemplate" rows="30" placeholder="Escreva sua mensagem e use no meio do texto:
{nome} = 'Nome do contato',
{data} = 'Data Dia/MÃªs/Ano',
{hora} = 'Hora:Minuto'"
title="Dicas:
{nome} = 'Nome do contato',
{data} = 'Data Dia/MÃªs/Ano',
{hora} = 'Hora:Minuto'""
></textarea>
                        <div class="bts_textarea">
                            <button type="button" id="emojiButton" title="Emojis" onclick="toggleEmojiPopup()" style="margin-right: 10px;">ðŸ˜Š</button>
                            <button id="envio" type="submit">Enviar Mensagem</button>
                        </div>
                    </div>
                </form>

                <div id="emojiPopup" class="emoji-popup" style="display: none;">
                    <!-- Emojis serÃ£o preenchidos aqui dinamicamente -->
                </div>
            </div>
            <div class="right" id="right">
                <form id="contactsForm">
                    <ul id="contactsList" class="contactsList">
                        <div><h2>Carregando Contatos...</h2></div>
                        <!-- A lista de contatos serÃ¡ carregada dinamicamente aqui -->
                    </ul>
                </form>
                <button id="updateContactsBtn" type="button" onclick="loadContacts()">Atualizar Lista</button>
                <button id="selectAll" type="button">Marcar Todos</button>
            </div>            
        </div>
    </main>

    <footer>
        <div class="log-box" id="logBox"></div>
        <div>
            <p>Desenvolvido por <strong>ClÃ¡udio Phelippe</strong></p>
            <p>
                <a href="mailto:claudiophelippe@gmail.com" title="EMAIL" style="text-decoration: underline; color: #ffffff; cursor: pointer;" onmouseover="this.style.color='#800080'" onmouseout="this.style.color='#ffffff'">
                    claudiophelippe@gmail.com
                </a>
            </p>
        </div>
    </footer>

    <script>
        let selectedContacts = [];
        let connectionInterval;
        let mouseOverTimeout;
        
        // Verifica o status de conexÃ£o a cada 5 segundos
        connectionInterval = setInterval(() => {
            checkConnection();
        }, 5000);

        async function checkConnection() {
            try {
                const response = await fetch('/check-connection');
                const data = await response.json(); // Espera-se que a resposta seja JSON
                
                const connectionStatusElement = document.getElementById('connectionStatus');
                const qrCodeElement = document.querySelector('.qr-code');
                const contentElement = document.querySelector('.content');
                
                if (data.isConnected) {
                    connectionStatusElement.innerHTML = `<h1>Conectado como: ${data.connectionInfo.pushname || data.connectionInfo.number}</h1>`;
                    qrCodeElement.style.display = 'none';
                    contentElement.style.display = 'flex';
                    loadContacts();
                    clearInterval(connectionInterval);
                } else {
                    connectionStatusElement.innerHTML = '<h1>Conecte-se ao WhatsApp</h1>';
                    const qrImg = document.querySelector('.qr-code img');
                    if (qrImg) {
                        qrImg.src = data.qrCode;
                    }
                    qrCodeElement.style.display = 'block';
                    contentElement.style.display = 'none';
                }
            } catch (error) {
                console.error('Erro ao verificar conexÃ£o:', error);
            }
        }

        async function loadContacts(selectedContactsFromBackend = []) {
            try {
                const response = await fetch('/contacts');
                const contacts = await response.json();
    
                const contactsList = document.querySelector('#contactsList');
                contactsList.innerHTML = '';
    
                contacts.forEach(contact => {
                    if (contact.pushname) {
                        const li = document.createElement('li');
                        const isChecked = selectedContactsFromBackend.includes(contact.id._serialized);
                        li.innerHTML = ` 
                            <div class="contact-container" id="Contato_${contact.id._serialized}">
                                <img 
                                    src="${contact.profilePicUrl || '/imgs/default-profile.png'}" 
                                    alt="${contact.pushname}" 
                                    class="contact-image"
                                    onerror="this.src='/imgs/default-profile.png'"
                                    onmouseover="handleMouseOver(this)" 
                                    onmouseout="handleMouseOut(this)"
                                >
                                <div class="contact-info">
                                    <input 
                                        type="checkbox" 
                                        name="contacts" 
                                        value="${contact.id._serialized}" 
                                        wppname="${contact.pushname || contact.id.user}"
                                        ${isChecked ? 'checked' : ''} 
                                        onchange="updateContacts()"
                                        class="contact-checkbox"
                                    >
                                    <div class="contact-name" title="${formatPhoneNumber(contact.id.user)}">
                                        ${contact.displayName}
                                    </div>
                                    <!-- Campo de input adicionado para captar o evento keydown -->
                                    <input type="text" style="position: absolute; opacity: 0; pointer-events: none;">
                                </div>
                            </div>
                        `;
                        
                        contactsList.appendChild(li);
                    }
                });
                await loadContactsCK();

                const contactContainers = document.getElementsByTagName('li');

                for (let i = 0; i < contactContainers.length; i++) {

                    contactContainers[i].addEventListener('keydown', function (event) {
                        const letter = event.key.toLowerCase(); // ObtÃ©m a letra pressionada
                        if (letter >= 'a' && letter <= 'z') {
                            // Se for uma letra (a-z), executa a rolagem
                            event.preventDefault();
                            scrollToContactStartingWith(letter);
                        }
                    });
                }

            } catch (error) {
                console.error('Erro ao carregar os contatos:', error);
            }
        }

        async function loadContactsCK(selectedContactsFromBackend = []) {
            try {
                const response = await fetch('/contactsCK');
                const contacts = await response.json();
                
                const contactsList = document.querySelector('#contactsList');
                contacts.forEach(contact => {
                    let li = Array.from(contactsList.getElementsByTagName('li')).find(item => {
                        const checkbox = item.querySelector('input[type="checkbox"]');
                        return checkbox && checkbox.value === contact;
                    });
        
                    if (li) {
                        const checkbox = li.querySelector('input[type="checkbox"]');
                        checkbox.checked = true;
                    }
                });
            } catch (error) {
                console.error('Erro ao carregar os contatos:', error);
            }
        }
        
        function updateContacts() {
            const contactsForm = document.getElementById('contactsForm');
            const selectedCheckboxes = Array.from(contactsForm.querySelectorAll('input[name="contacts"]:checked'));
            const selectedContacts = selectedCheckboxes.map(checkbox => checkbox.value);
    
            fetch('/update-contacts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ contacts: selectedContacts })
            })
            .then(response => response.json())
            .then(result => {
                console.log(result.message);
                setTimeout(loadContactsCK, 2000);
            })
            .catch(error => {
                console.error('Erro ao atualizar contatos:', error);
            });
        }
        
        function sendMessage(event) {
            event.preventDefault();
    
            const contactsForm = document.getElementById('contactsForm');
            const selectedCheckboxes = Array.from(contactsForm.querySelectorAll('input[name="contacts"]:checked'));
            const selectedContacts = selectedCheckboxes.map(checkbox => checkbox.value);
    
            const messageTemplate = document.getElementById('messageTemplate').value;
    
            fetch('/send-message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contacts: selectedContacts,
                    messageTemplate: messageTemplate
                })
            })
            .then(response => response.json())
            .then(result => {
                console.log(result.message);
                setTimeout(loadContactsCK, 2000);
            })
            .catch(error => {
                console.error('Erro ao enviar mensagem:', error);
            });
        }

        function formatPhoneNumber(phoneNumber) {
            // Remove o cÃ³digo do paÃ­s (55) e formata o nÃºmero
            const number = phoneNumber.replace(/^55/, ''); // Remove o cÃ³digo do paÃ­s
            const areaCode = number.slice(0, 2); // Pega o DDD
            const firstPart = number.slice(2, 7); // Pega a primeira parte do nÃºmero
            const secondPart = number.slice(7); // Pega a segunda parte do nÃºmero
        
            return `(${areaCode}) ${firstPart}-${secondPart}`;
        }

        function handleMouseOver(imageElement) {
            // Altera o cursor para o ponteiro (mÃ£ozinha)
            imageElement.style.cursor = "pointer";

            imageElement.classList.add("hovered");

            mouseOverTimeout = setTimeout(() => {
                imageElement.classList.add("enlarged");
            }, 1300);
        }
        
        function handleMouseOut(imageElement) {

            clearTimeout(mouseOverTimeout);
            imageElement.classList.remove("enlarged");
            imageElement.classList.remove("hovered");
            imageElement.style.cursor = "default";
        }

        window.onload = checkConnection;
    </script>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const logBox = document.getElementById('logBox');
        const socket = io();

        socket.on('log', (message) => {
            logBox.innerHTML += `<p>${message}</p>`;
            logBox.scrollTop = logBox.scrollHeight;
            if (message.includes('QR RECEIVED')){
                connectionInterval = setInterval(() => {
                    checkConnection();
                }, 5000);
             }
            
        });

        socket.on('qrCode', (qrCode) => {
            const qrImg = document.querySelector('.qr-code img');
            if (qrImg) {
                qrImg.src = qrCode;
            }
        });
    </script>

    <script>
        // VariÃ¡veis globais para o termo de busca acumulado e o timeout
        let searchTerm = ''; // Termo acumulado com as letras digitadas
        let searchTimeout; // ReferÃªncia para o timeout
    
        document.addEventListener('keydown', function (event) {
            const letter = event.key.toLowerCase(); // ObtÃ©m a letra pressionada
            if (letter >= 'a' && letter <= 'z') {
                // Se for uma letra (a-z), executa a lÃ³gica de busca
                event.preventDefault();
                scrollToContactMatching(letter);
            }
        });
    
        function scrollToContactMatching(letter) {
            const formContainer = document.getElementById('contactsForm'); // O container do formulÃ¡rio
            const contacts = formContainer.querySelectorAll('.contact-container'); // Contatos dentro do formulÃ¡rio
    
            // Adiciona a letra ao termo acumulado
            searchTerm += removeAccents(letter.toLowerCase());
    
            // Limpa o timeout anterior
            clearTimeout(searchTimeout);
    
            // Configura o timeout para buscar apÃ³s 2 segundos de inatividade
            searchTimeout = setTimeout(() => {
                let found = false;
    
                for (let contact of contacts) {
                    const contactName = contact.querySelector('.contact-name').textContent.trim().toLowerCase();
                    const normalizedContactName = removeAccents(contactName); // Remove os acentos do nome
    
                    if (normalizedContactName.includes(searchTerm)) {
                        // ObtÃ©m a posiÃ§Ã£o do contato em relaÃ§Ã£o ao container
                        const containerRect = formContainer.getBoundingClientRect();
                        const contactRect = contact.getBoundingClientRect();
    
                        // Calcula a posiÃ§Ã£o do contato dentro do container
                        const offsetTop = contactRect.top - containerRect.top + formContainer.scrollTop;
    
                        // Altere o scroll apenas do container do formulÃ¡rio
                        formContainer.scrollTo({
                            top: offsetTop,
                            behavior: 'smooth'
                        });
    
                        found = true;
                        break; // Para no primeiro contato encontrado
                    }
                }
    
                if (!found) {
                    console.log(`Nenhum contato encontrado contendo '${searchTerm}'`);
                }
    
                // Reseta o termo de busca apÃ³s 2 segundos de inatividade
                searchTerm = '';
            }, 900); // 2 segundos
        }
    
        // FunÃ§Ã£o para remover acentos de uma string
        function removeAccents(str) {
            return str.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        }
    </script>
    

    <script>
        // FunÃ§Ã£o para alternar a visibilidade do popup de emojis
        function toggleEmojiPopup() {
            const emojiPopup = document.getElementById('emojiPopup');
            const currentDisplay = emojiPopup.style.display;
        
            // Se o popup estiver visÃ­vel, escondÃª-lo; caso contrÃ¡rio, exibi-lo
            emojiPopup.style.display = currentDisplay === 'none' ? 'flex' : 'none';
        }

        // FunÃ§Ã£o para inserir o emoji no campo de texto
        function insertEmoji(emoji) {
            const messageTemplate = document.getElementById('messageTemplate');

            // Insere o emoji no ponto onde o cursor estÃ¡
            const cursorPosition = messageTemplate.selectionStart;
            const textBefore = messageTemplate.value.substring(0, cursorPosition);
            const textAfter = messageTemplate.value.substring(cursorPosition);
            messageTemplate.value = textBefore + emoji + textAfter;
        
            // Move o cursor apÃ³s o emoji inserido
            messageTemplate.selectionStart = messageTemplate.selectionEnd = cursorPosition + emoji.length;

            // Esconde o popup apÃ³s inserir o emoji
            document.getElementById('emojiPopup').style.display = 'none';
        }

        async function loadEmojis() {
            try {
                const response = await fetch('https://emoji-api.com/emojis?access_key=16b2d7eefdd0de21fb270cb0b02579fd3a219df3');
                const data = await response.json();
        
                // Limpar o popup antes de adicionar os novos emojis
                emojiPopup.innerHTML = '';
        
                // Adicionar cada emoji ao popup
                data.forEach(emoji => {
                    const emojiDiv = document.createElement('div');
                    emojiDiv.classList.add('emoji');
                    emojiDiv.textContent = emoji.character;
                    emojiDiv.onclick = () => insertEmoji(emoji.character);
                    emojiPopup.appendChild(emojiDiv);
                });
            } catch (error) {
                console.error('Erro ao carregar os emojis:', error);
            }
        }
        
        
        // Carregar os emojis quando a pÃ¡gina for carregada
        document.addEventListener('DOMContentLoaded', loadEmojis);

    </script>
    <script>
        const selectAllButton = document.getElementById("selectAll");
        const checkboxes = document.getElementsByClassName("contact-checkbox");
        console.log(checkboxes);
        let allSelected = false;
        // FunÃ§Ã£o para alternar entre marcar e desmarcar
        selectAllButton.addEventListener("click", () => {
            allSelected = !allSelected; // Alterna o estado
            Array.from(checkboxes).forEach(checkbox => checkbox.checked = allSelected);
            updateContacts();
            selectAllButton.textContent = allSelected ? "Desmarcar Todos" : "Marcar Todos";
        });
    </script>
</body>
</html>
